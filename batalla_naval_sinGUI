import tkinter as tk
from tkinter import messagebox

CELL_SIZE = 40
BOARD_SIZE = 10

# ===================== Clases de lógica =====================
class Ship:
    def __init__(self, name, size):
        self.name = name
        self.size = size
        self.hits = 0
        self.positions = []

    def hit(self):
        self.hits += 1
        return self.hits == self.size

class Patrol(Ship):
    def __init__(self):
        super().__init__('Patrulla', 2)

class Destroyer(Ship):
    def __init__(self):
        super().__init__('Destructor', 3)

class Submarine(Ship):
    def __init__(self):
        super().__init__('Submarino', 3)

class Battleship(Ship):
    def __init__(self):
        super().__init__('Buque', 4)

class Carrier(Ship):
    def __init__(self):
        super().__init__('PortaAviones', 5)

class Player:
    def __init__(self, name):
        self.name = name
        self.board = [[' ' for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]
        self.ships = []

    def place_ship(self, ship, start_row, start_col, direction):
        positions = []
        # Verificar espacio disponible y límites
        if direction == 'H':
            if start_col + ship.size > BOARD_SIZE:
                return False
            for i in range(ship.size):
                if self.board[start_row][start_col + i] != ' ':
                    return False
                positions.append((start_row, start_col + i))
        else:
            if start_row + ship.size > BOARD_SIZE:
                return False
            for i in range(ship.size):
                if self.board[start_row + i][start_col] != ' ':
                    return False
                positions.append((start_row + i, start_col))
        # Colocar barco
        for r, c in positions:
            self.board[r][c] = ship.name[0]
        ship.positions = positions
        self.ships.append(ship)
        return True

    def receive_attack(self, row, col):
        if self.board[row][col] in ['X', 'O']:
            return 'already'
        if self.board[row][col] != ' ':
            # impacto
            self.board[row][col] = 'X'
            for ship in self.ships:
                if (row, col) in ship.positions:
                    sunk = ship.hit()
                    return 'sunk' if sunk else 'hit'
        # agua
        self.board[row][col] = 'O'
        return 'miss'

    def all_ships_sunk(self):
        return all(ship.hits == ship.size for ship in self.ships)

# ===================== Interfaz Gráfica con Tkinter =====================
class BattleshipGUI:
    def __init__(self, root):
        self.root = root
        self.root.title('Batalla Naval')

        self.players = [Player('Jugador 1'), Player('Jugador 2')]
        self.current_player = 0  # índice jugador en turno
        self.mode = 'placement'  # modos: 'placement' o 'attack'
        self.direction = 'H'

        # Barcos a colocar
        self.ships_to_place = [Patrol(), Destroyer(), Submarine(), Battleship(), Carrier()]
        self.place_index = 0

        # Canvas
        canvas_width = BOARD_SIZE * CELL_SIZE * 2 + 50
        canvas_height = BOARD_SIZE * CELL_SIZE + 50
        self.canvas = tk.Canvas(root, width=canvas_width, height=canvas_height)
        self.canvas.pack()

        # Orientación
        orient_frame = tk.Frame(root)
        orient_frame.pack()
        tk.Radiobutton(orient_frame, text='Horizontal', variable=tk.StringVar(value=self.direction),
                       value='H', command=lambda: self.set_direction('H')).pack(side=tk.LEFT)
        tk.Radiobutton(orient_frame, text='Vertical', variable=tk.StringVar(value=self.direction),
                       value='V', command=lambda: self.set_direction('V')).pack(side=tk.LEFT)

        self.canvas.bind('<Button-1>', self.on_click)
        self.draw()

    def set_direction(self, d):
        self.direction = d

    def draw(self):
        self.canvas.delete('all')
        # Dibujar tableros
        for p_idx in range(2):
            player = self.players[p_idx]
            offset_x = p_idx * (BOARD_SIZE * CELL_SIZE + 20) + 20
            # Números columnas
            for c in range(BOARD_SIZE):
                x = offset_x + c * CELL_SIZE + CELL_SIZE/2
                self.canvas.create_text(x, 10, text=str(c))
            # Números filas y celdas
            for r in range(BOARD_SIZE):
                y = 20 + r * CELL_SIZE + CELL_SIZE/2
                self.canvas.create_text(offset_x - 10, y, text=str(r))
                for c in range(BOARD_SIZE):
                    x0 = offset_x + c * CELL_SIZE
                    y0 = 20 + r * CELL_SIZE
                    x1 = x0 + CELL_SIZE
                    y1 = y0 + CELL_SIZE
                    val = player.board[r][c]
                    fill = 'white'
                    if val == 'X': fill = 'red'
                    elif val == 'O': fill = 'lightblue'
                    elif p_idx == self.current_player or self.mode == 'placement':
                        # mostrar barcos propios o en fase de colocación
                        fill = 'gray' if val == ' ' else 'lightgray'
                    else:
                        # ocultar barcos enemigos en ataque
                        fill = 'white' if val not in ['X','O'] else fill
                    if val not in [' ', 'X', 'O'] and fill == 'lightgray':
                        text = val
                    else:
                        text = val if val in ['X','O'] else ''
                    self.canvas.create_rectangle(x0, y0, x1, y1, fill=fill, outline='black')
                    self.canvas.create_text((x0+x1)/2, (y0+y1)/2, text=text)
        # Indicador
        info = f"Turno: {self.players[self.current_player].name} - "
        info += "Coloca barcos" if self.mode == 'placement' else 'Ataca'
        self.root.title(f'Batalla Naval - {info}')

    def on_click(self, event):
        x, y = event.x, event.y
        p_idx = 0 if x < BOARD_SIZE * CELL_SIZE + 20 else 1
        board_x = x - (p_idx * (BOARD_SIZE * CELL_SIZE + 20) + 20)
        row = int((y - 20) // CELL_SIZE)
        col = int(board_x // CELL_SIZE)
        if row < 0 or row >= BOARD_SIZE or col < 0 or col >= BOARD_SIZE:
            return

        player = self.players[self.current_player]
        opponent = self.players[1 - self.current_player]

        if self.mode == 'placement' and p_idx == self.current_player:
            ship = self.ships_to_place[self.place_index]
            if player.place_ship(ship, row, col, self.direction):
                self.place_index += 1
                if self.place_index >= len(self.ships_to_place):
                    if self.current_player == 0:
                        self.current_player = 1
                        self.place_index = 0
                        self.ships_to_place = [Patrol(), Destroyer(), Submarine(), Battleship(), Carrier()]
                    else:
                        self.mode = 'attack'
                self.draw()
            else:
                messagebox.showwarning('Error', 'Posición inválida para colocar barco')

        elif self.mode == 'attack' and p_idx != self.current_player:
            result = opponent.receive_attack(row, col)
            if result == 'already':
                messagebox.showinfo('Info', 'Ya atacaste aquí')
            elif result == 'hit':
                messagebox.showinfo('¡Impacto!', 'Le diste a un barco')
            elif result == 'sunk':
                messagebox.showinfo('¡Hundido!', 'Hundiste un barco')
            else:
                messagebox.showinfo('Agua', 'No hubo barco')
            if opponent.all_ships_sunk():
                messagebox.showinfo('¡Victoria!', f'{player.name} ha ganado')
                self.canvas.unbind('<Button-1>')
            else:
                self.current_player = 1 - self.current_player
                self.draw()

# Ejecutar
if __name__ == '__main__':
    root = tk.Tk()
    app = BattleshipGUI(root)
    root.mainloop()
