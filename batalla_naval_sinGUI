class Ship:
    def __init__(self, name, size):
        self.name = name  # Nombre del barco (ej: "Destructor")
        self.size = size # Tamaño del barco (cantidad de casillas que ocupa)
        self.hits = 0  # Contador de impactos recibidos
        self.positions = [] # Lista con posiciones (tuplas) ocupadas en el tablero

    def place_ship(self, start_row, start_col, direction, board):
        positions = []  # Lista temporal para guardar las posiciones a ocupar
         
        if direction == 'H': # Si la dirección es horizontal
            if start_col + self.size > len(board[0]):  # Verifica que el barco no se salga del tablero horizontalmente
                return False # Si se sale, retorna False para indicar que no se pudo colocar
            for i in range(self.size):
                if board[start_row][start_col+i] != ' ':  # Verifica que cada casilla esté vacía
                    return False  # Si alguna está ocupada, retorna False
                positions.append((start_row, start_col + i))  # Añade la posición válida a la lista
                
        elif direction == 'V':     # Si la dirección es vertical
            if start_row + self.size > len(board): # Validar que no se salga del borde vertical
                return False
            for i in range(self.size):
                if board[start_row+i][start_col] != ' ':  # Verifica que la casilla vertical esté vacía
                    return False
                positions.append((start_row + i, start_col))   # Añade la posición válida verticalmente

        else:
            return False  # Si la dirección no es ni H ni V, retorna False
        
        # Si llegamos aquí, todas las posiciones son válidas, así que colocamos el barco
        for row, col in positions:
            board[row][col] = self.name[0].upper() # Pone la primera letra del nombre del Ship en mayúscula en el tablero
        
        self.positions = positions  # Guarda las posiciones definitivas del barco
        return True  # Retorna True indicando que el barco se colocó con éxito



    def hit(self):
        self.hits +=1 # Incrementa el contador de impactos
        if self.hits == self.size:  # Si impactos igualan el tamaño, barco hundido
            return True    # Retorna True indicando hundido
        return False    # Si no, retorna False
        

# Definición de tipos de barcos con herencia para simplificar
class Patrol(Ship):
    def __init__(self):
        super().__init__('Patrulla',2) # Llama al constructor de Ship con nombre y tamaño

class Destroyer(Ship):
    def __init__(self):
        super().__init__('Destructor',3)

class Submarine(Ship):
    def __init__(self):
        super().__init__('Submarino',3)

class Battleship(Ship):
    def __init__(self):
        super().__init__('Buque',4)

class Carrier(Ship):
    def __init__(self):
        super().__init__('PortaAviones',5)


class Player:
    def __init__(self, name):
        self.name = name # Nombre del jugador
        self.ships = [] # Lista de barcos colocados por el jugador
        self.board = [[' ' for _ in range(10)] for _ in range(10)] # Crea un tablero 10x10 lleno de espacios
        self.hits_made = 0 # Contador de impactos realizados por el jugador


    def print_board(self, show_ships=True):
        print("   " + " ".join(str(i) for i in range(10))) # Muestra encabezado con números de columna
        for row_num in range(10):
            print(f"{row_num}  ", end="") # Imprime número de fila al inicio de cada línea
            for col_num in range(10):
                char = self.board[row_num][col_num]
                if not show_ships and char not in [' ', 'X', 'O']: # Ocultar barcos si es tablero enemigo
                    print(' ', end=" ")
                else:
                    print(char, end=" ")   # Imprime el caracter (barco, X, O o espacio)
            print() # Salto de línea al final de cada fila

        

    def place_ships(self):
        ships_to_place = [
            Destroyer(),
            Submarine(),
            Battleship(),
            Patrol(),
            Carrier()
        ]  # Barcos a colocar

        for ship in ships_to_place:
            placed = False
            while not placed:   # Bucle hasta que se coloque correctamente
                print(f"\n{self.name}, coloca el barco {ship.name} (tamaño {ship.size})")
                try:
                    row = int(input("Fila (0-9): "))  # Entrada fila
                    col = int(input("Columna (0-9): ")) # Entrada columna

                    if not (0 <= row < 10) or not (0 <= col < 10):  # Valida rango fila y columna
                        print("Fila o columna fuera de rango. Intenta con números entre 0 y 9.")
                        continue


                    direction = input("Dirección (H para horizontal, V para vertical): ").upper()
                    
                    if direction not in ('H', 'V'): # Validar dirección
                        print("Dirección inválida. Intenta de nuevo.")
                        continue

                    if ship.place_ship(row, col, direction, self.board): # Intenta colocar el barco
                        self.ships.append(ship)  # Si éxito, añade a la lista de barcos
                        self.print_board()  # Muestra tablero actualizado
                        placed = True   # Salir del bucle

                    else:
                        print("No se pudo colocar el barco. Posición inválida o espacio ocupado.")
                except ValueError: # Captura errores de conversión int
                    print("Entrada inválida. Usa números para fila y columna.")

    
    
    def has_been_attacked(self, row, col):
        return self.board[row][col] in ['X', 'O'] # Retorna True si ya hay disparo en esa posición
    

    def attack(self, opponent):
        while True:
            try:
                row = int(input(f"{self.name}, fila del ataque (0-9): ")) # Entrada fila ataque
                col = int(input(f"{self.name}, columna del ataque (0-9): ")) # Entrada columna ataque
                if not (0 <= row < 10 and 0 <= col < 10): # Validar rango de ataque
                    print("Posición fuera de rango. Intenta de nuevo.")
                    continue
                if opponent.has_been_attacked(row, col):  # Verificar si ya se atacó
                    print("Ya atacaste esta posición. Intenta otra.")
                    continue
                break
            except ValueError:
                print("Introduce números válidos para fila y columna.")

        if opponent.board[row][col] != ' ': # Si hay barco en esa posición
            print("¡Impacto!")
            opponent.board[row][col] = 'X' # Marca impacto en tablero
            self.hits_made +=1 # Incrementa impactos del jugador
            for ship in opponent.ships: 
                if (row, col) in ship.positions:   # Encuentra barco impactado
                    hundido = ship.hit()  # Marca impacto en el barco
                    if hundido:
                        print(f"¡Hundiste el {ship.name}!") # Indica si se hundió
                    break
        else:
            print("Agua...")
            opponent.board[row][col] = 'O'  # Marca disparo fallido

        print(f"\nTablero de {opponent.name} (sin barcos visibles):")
        opponent.print_board(show_ships=False) # Mostrar tablero del oponente sin barcos visibles
   
    def all_ships_sunk(self):
        return all(ship.hits == ship.size for ship in self.ships)  #retorna True si todos los barcos están hundidos


# Clase principal del juego
class BattleshipGame:
    def __init__(self):
        self.player1 = Player(input("Nombre jugador 1: "))  # Crear jugador 1
        self.player2 = Player(input("Nombre jugador 2: "))  # Crear jugador 2

    def play(self):
        # Colocar barcos
        print(f"\n{self.player1.name}, coloca tus barcos.")  # Mensaje jugador 1 coloca barcos
        self.player1.place_ships()            # Jugador 1 coloca barcos
        print(f"\n{self.player2.name}, coloca tus barcos.")   # Mensaje jugador 2 coloca barcos
        self.player2.place_ships()    # Jugador 2 coloca barcos


        current_player, opponent = self.player1, self.player2       # Definir quien comienza


        while True:
            print(f"\nTurno de {current_player.name}")
            current_player.attack(opponent)     # El jugador ataca
         
            if opponent.all_ships_sunk():  # Verifica si el oponente perdió
                print(f"{current_player.name} ha ganado el juego!")
                break

            current_player, opponent = opponent, current_player   # Cambia turno

    
    
        print(f"\nMarcador:")
        print(f"{self.player1.name}: {self.player1.hits_made} impactos")
        print(f"{self.player2.name}: {self.player2.hits_made} impactos")



if __name__ == "__main__":   # Punto de entrada, solo si se ejecuta directamente
    game = BattleshipGame() # Crea instancia del juego
    game.play()        # Comienza el juego
